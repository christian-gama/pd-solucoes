// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/christian-gama/pd-solucoes/internal/domain/model"
	mock "github.com/stretchr/testify/mock"

	querying "github.com/christian-gama/pd-solucoes/internal/domain/querying"

	repo "github.com/christian-gama/pd-solucoes/internal/domain/repo"
)

// Teacher is an autogenerated mock type for the Teacher type
type Teacher struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, params
func (_m *Teacher) Create(ctx context.Context, params repo.CreateTeacherParams) (*model.Teacher, error) {
	ret := _m.Called(ctx, params)

	var r0 *model.Teacher
	if rf, ok := ret.Get(0).(func(context.Context, repo.CreateTeacherParams) *model.Teacher); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Teacher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repo.CreateTeacherParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, params
func (_m *Teacher) Delete(ctx context.Context, params repo.DeleteTeacherParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.DeleteTeacherParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, params, preloads
func (_m *Teacher) FindAll(ctx context.Context, params repo.FindAllTeacherParams, preloads ...string) (*querying.PaginationOutput[*model.Teacher], error) {
	_va := make([]interface{}, len(preloads))
	for _i := range preloads {
		_va[_i] = preloads[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *querying.PaginationOutput[*model.Teacher]
	if rf, ok := ret.Get(0).(func(context.Context, repo.FindAllTeacherParams, ...string) *querying.PaginationOutput[*model.Teacher]); ok {
		r0 = rf(ctx, params, preloads...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*querying.PaginationOutput[*model.Teacher])
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repo.FindAllTeacherParams, ...string) error); ok {
		r1 = rf(ctx, params, preloads...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: ctx, params, preloads
func (_m *Teacher) FindOne(ctx context.Context, params repo.FindOneTeacherParams, preloads ...string) (*model.Teacher, error) {
	_va := make([]interface{}, len(preloads))
	for _i := range preloads {
		_va[_i] = preloads[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *model.Teacher
	if rf, ok := ret.Get(0).(func(context.Context, repo.FindOneTeacherParams, ...string) *model.Teacher); ok {
		r0 = rf(ctx, params, preloads...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Teacher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repo.FindOneTeacherParams, ...string) error); ok {
		r1 = rf(ctx, params, preloads...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, params
func (_m *Teacher) Update(ctx context.Context, params repo.UpdateTeacherParams) (*model.Teacher, error) {
	ret := _m.Called(ctx, params)

	var r0 *model.Teacher
	if rf, ok := ret.Get(0).(func(context.Context, repo.UpdateTeacherParams) *model.Teacher); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Teacher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repo.UpdateTeacherParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTeacher interface {
	mock.TestingT
	Cleanup(func())
}

// NewTeacher creates a new instance of Teacher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTeacher(t mockConstructorTestingTNewTeacher) *Teacher {
	mock := &Teacher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
